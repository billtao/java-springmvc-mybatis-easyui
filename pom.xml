<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd ">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.larry.java</groupId>
	<artifactId>java-springmvc-mybatis-easyui</artifactId>
	<packaging>war</packaging>
	<version>0.0.1-SNAPSHOT</version>
	<!--<name>sshe</name>-->
	<!--<url>http://maven.apache.org</url>-->
	<dependencies>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>3.2.0.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>3.2.0.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>3.2.0.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.1.1</version>
		</dependency>
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>1.1.1</version>
		</dependency>
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.21</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>druid</artifactId>
			<version>0.2.9</version>
		</dependency>
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>1.7.1</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-asl</artifactId>
			<version>1.9.11</version>
		</dependency>
		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>1.2.2</version>
		</dependency>
		<!-- JSTL -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<version>2.2.1-b03</version>
			<scope>provided</scope>
		</dependency>
		<!-- Tomcat Servlet API -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.1.0</version>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
		</dependency>
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>fastjson</artifactId>
			<version>1.1.26</version>
		</dependency>
		<!-- 图片验证码jcaptcha -->
		<dependency>
			<groupId>com.octo.captcha</groupId>
			<artifactId>jcaptcha</artifactId>
			<version>1.0</version>
		</dependency> 
		<dependency>
			<groupId>commons-logging</groupId>
			<artifactId>commons-logging</artifactId>
			<version>1.1.3</version>
		</dependency>
		<!-- git 需要的依赖 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>3.2.3.RELEASE</version>
		</dependency>
		<!-- 加入ehcache -->
		<dependency>
			<groupId>net.sf.ehcache</groupId>
			<artifactId>ehcache</artifactId>
			<version>2.7.0</version>
		</dependency>
		<!--<dependency>-->
			<!--<groupId>com.thoughtworks.xstream</groupId>-->
			<!--<artifactId>xstream</artifactId>-->
			<!--<version>1.3.1</version>-->
		<!--</dependency>-->
	</dependencies>

	<repositories>
		<repository>
			<id>maven-jahia-org</id>
			<name>maven-jahia-org</name>
			<url>http://maven.jahia.org/maven2</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>

	<build>
		<!--一般情况下，我们用到的资源文件（各种xml，properites，xsd文件等）都放在src/main/resources下面，利用maven打包时，-->
		<!--maven能把这些资源文件打包到相应的jar或者war里。-->
		<!--有时候，比如mybatis的mapper.xml文件，我们习惯把它和Mapper.java放一起，都在src/main/java下面，这样利用maven打包时，-->
		<!--就需要修改pom.xml文件，来把mapper.xml文件一起打包进jar或者war里了，否则，这些文件不会被打包的。-->
		<!--（maven认为src/main/java只是java的源代码路径）。-->

		<!--Maven和Mybatis整合时打包漏掉mapper的xml文件及其它资源-->
		<resources>
			<resource>
				<directory>src/main/java</directory>
				<includes>
					<!--<include>**/*.properties</include>-->
					<include>**/*.xml</include>
				</includes>
				<filtering>false</filtering>
			</resource>
		</resources>
		<!--<finalName>sshe</finalName>-->
		<plugins>

			 <!--编译的时候使用JDK6和UTF8编码-->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>

			 <!--配置Maven插件(mvn jetty:run可以运行项目)-->
			<plugin>
				<groupId>org.mortbay.jetty</groupId>
				<artifactId>maven-jetty-plugin</artifactId>
				<version>6.1.26</version>
			</plugin>

			<!--
        此plugin可以用
        利用此plugin，把源代码中的xml文件，
        打包到相应位置，这里主要是为了打包Mybatis的mapper.xml文件
        -->
			<!--<plugin>-->
				<!--<groupId>org.codehaus.mojo</groupId>-->
				<!--<artifactId>build-helper-maven-plugin</artifactId>-->
				<!--<version>1.8</version>-->
				<!--<executions>-->
					<!--<execution>-->
						<!--<id>add-resource</id>-->
						<!--<phase>generate-resources</phase>-->
						<!--<goals>-->
							<!--<goal>add-resource</goal>-->
						<!--</goals>-->
						<!--<configuration>-->
							<!--<resources>-->
								<!--<resource>-->
									<!--<directory>src/main/java</directory>-->
									<!--<includes>-->
										<!--<include>**/*.xml</include>-->
									<!--</includes>-->
								<!--</resource>-->
							<!--</resources>-->
						<!--</configuration>-->
					<!--</execution>-->
				<!--</executions>-->
			<!--</plugin>-->
		</plugins>
	</build>
</project>
